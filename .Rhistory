qm.fitted_class<-lookup2[qm.fitted_class]
qm.pred<-cbind(predict(qm.fit1,dataT),
predict(qm.fit2,dataT),
predict(qm.fit3,dataT)
)
qm.pred_class<-lookup2[apply(qm.pred,1,order,decreasing=T)[1,]]
qm.col<-lookup1[qm.pred_class]
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5)
zp <- qm.pred[,3] - pmax(qm.pred[,2], qm.pred[,1])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
zp <- qm.pred[,2] - pmax(qm.pred[,1], qm.pred[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
rm(list=ls())
n1<-n2<-n3<-100; n<-n1+n2+n3
data<-read.table("data/simulated_data_2.txt")
lookup1<-c(b="blue", g="green3", o="orange")
data.col<-lookup1[data$class]
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5)
Y<-class.ind(data$class)
lm.fit1<-lm(Y[,1]~X1+X2, data=data)
lm.fit2<-lm(Y[,2]~X1+X2, data=data)
lm.fit3<-lm(Y[,3]~X1+X2, data=data)
lm.fitted<-cbind(predict(lm.fit1),predict(lm.fit2),predict(lm.fit3))
lm.fitted_class<-apply(lm.fitted,1,order,decreasing=T)[1,]
lookup2<-c("b","g","o")
lm.fitted_class<-lookup2[lm.fitted_class]
len1<-len2<-100
delta<-0.2
p.x1<-seq(from=min(data$X1-delta),to=max(data$X1+delta),length=len1)
p.x2<-seq(from=min(data$X2-delta),to=max(data$X2+delta),length=len2)
dataT<-expand.grid(X1=p.x1,X2=p.x2)
lm.pred<-cbind(predict(lm.fit1,dataT),
predict(lm.fit2,dataT),
predict(lm.fit3,dataT)
)
lm.pred_class<-lookup2[apply(lm.pred,1,order)[3,]]
lm.col<-lookup1[lm.pred_class]
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5)
zp <- lm.pred[,3] - pmax(lm.pred[,2], lm.pred[,1])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
lda.fit<-lda(class~X1+X2,prior=c(1/3,1/3,1/3),data=data)
lda.pred<-predict(lda.fit,dataT)
lda.col<-lookup1[lda.pred$class]
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5)
zp <- lda.pred$posterior[,3] -
pmax(lda.pred$posterior[,2],lda.pred$posterior[,1])
contour(p.x1, p.x2, matrix(zp, nrow=len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
zp <- lda.pred$posterior[,2] -
pmax(lda.pred$posterior[,1],lda.pred$posterior[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
colMeans(data[,1:2])
out<-aggregate(x=data[,1:2],by=list(data$class),mean)
out<-out[c(3,1,2),]
out
lines(X2~X1, data=out)
a<-coef(lm(X2~X1, data=out))[1]
b<-coef(lm(X2~X1, data=out))[2]
abline(a,b)
abline(lm(X2~X1, data=out),col="red")
u<-c(1,b)/sqrt(1+b^2)
u; crossprod(u)
crossprod(u,as.numeric(data[1,1:2]))
data.project<-as.matrix(data[,1:2])%*%u
plot(data.project,lm.fitted[,2],col="green3",cex=0.5,xlab="",ylab="")
points(data.project,lm.fitted[,3],col="orange",cex=0.5)
points(data.project,lm.fitted[,1],col="blue",cex=0.5)
rug(data.project[data$class=="b"],col="blue")
rug(data.project[data$class=="g"],col="green3")
rug(data.project[data$class=="o"],col="orange")
qm.fit1<-lm(Y[,1]~X1+X2+I(X1*X2)+I(X1^2)+I(X2^2), data=data)
qm.fit2<-lm(Y[,2]~X1+X2+I(X1*X2)+I(X1^2)+I(X2^2), data=data)
qm.fit3<-lm(Y[,3]~X1+X2+I(X1*X2)+I(X1^2)+I(X2^2), data=data)
qm.fitted<-cbind(predict(qm.fit1),predict(qm.fit2),predict(qm.fit3))
qm.fitted_class<-apply(qm.fitted,1,order,decreasing=T)[1,]
qm.fitted_class<-lookup2[qm.fitted_class]
qm.pred<-cbind(predict(qm.fit1,dataT),
predict(qm.fit2,dataT),
predict(qm.fit3,dataT)
)
qm.pred_class<-lookup2[apply(qm.pred,1,order,decreasing=T)[1,]]
qm.col<-lookup1[qm.pred_class]
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5)
zp <- qm.pred[,3] - pmax(qm.pred[,2], qm.pred[,1])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
zp <- qm.pred[,2] - pmax(qm.pred[,1], qm.pred[,3])
plot(data.project,qm.fitted[,2],col="green3",cex=0.5,ylim=c(-.5,1.5),
xlab="",ylab="")
points(data.project,qm.fitted[,1],col="blue",cex=0.5)
points(data.project,qm.fitted[,3],col="orange",cex=0.5)
rug(data.project[data$class=="b"],col="blue")
rug(data.project[data$class=="g"],col="green3")
rug(data.project[data$class=="o"],col="orange")
rm(list=ls())
vowel<-read.table("data/vowel_training.txt",
sep=",",head=T,row.names=1)
dim(vowel)
n<-dim(vowel)[1]
vowel[1:5,]
lda.fit<-lda(y~.,data=vowel)
lda.pred<-predict(lda.fit)
names(lda.pred)
dim(lda.pred$x)
dim(vowel)
lookup<-c("black", "blue", "brown", "violet", "orange",
"cyan", "gray60", "yellow2", "gray40",
"red", "green3")
names(lookup)<-as.character(1:11)
vowel.col<-lookup[vowel$y]
means.hat<-means.hat[,-1]
means.hat<-aggregate(lda.pred$x,by=list(vowel$y),FUN=mean)
plot(LD2~LD1,data=lda.pred$x,col=vowel.col,cex=0.8)
points(means.hat[,1],means.hat[,2],cex=1.5,bg=lookup,pch=21)
out<-as.matrix(table(lda.pred$class,vowel$y)); out
training.error<-(sum(out)-sum(diag(out)))/n
vowelT<-read.table("data/vowel_test.txt",
sep=",",head=T,row.names=1)
training.error
vowelT[1:5,]
lda.pred<-predict(lda.fit,vowelT)
out<-as.matrix(table(lda.pred$class,vowelT$y)); out
test.error<-(sum(out)-sum(diag(out)))/dim(vowelT)[1]
test.error
lm.fit1<-lm(Y[,1]~.-y, data=vowel)
Y<-class.ind(vowel$y)
lm.fit2<-lm(Y[,2]~.-y, data=vowel)
lm.fit3<-lm(Y[,3]~.-y, data=vowel)
lm.fit4<-lm(Y[,4]~.-y, data=vowel)
lm.fit5<-lm(Y[,5]~.-y, data=vowel)
lm.fit6<-lm(Y[,6]~.-y, data=vowel)
lm.fit7<-lm(Y[,7]~.-y, data=vowel)
lm.fit8<-lm(Y[,8]~.-y, data=vowel)
lm.fit9<-lm(Y[,9]~.-y, data=vowel)
lm.fit10<-lm(Y[,10]~.-y, data=vowel)
lm.fit11<-lm(Y[,11]~.-y, data=vowel)
lm.fitted<-cbind(predict(lm.fit1),predict(lm.fit2),
predict(lm.fit3),predict(lm.fit4),
predict(lm.fit5),predict(lm.fit6),
predict(lm.fit7),predict(lm.fit8),
predict(lm.fit9),predict(lm.fit10),
predict(lm.fit11)
)
lm.fitted_class<-apply(lm.fitted,1,order,decreasing=T)[1,]
out<-as.matrix(table(lm.fitted_class,vowel$y)); out
training.error.lm<-(sum(out)-sum(diag(out)))/n
training.error.lm
lm.pred<-cbind(predict(lm.fit1,vowelT),
predict(lm.fit2,vowelT),
predict(lm.fit3,vowelT),
predict(lm.fit4,vowelT),
predict(lm.fit5,vowelT),
predict(lm.fit6,vowelT),
predict(lm.fit7,vowelT),
predict(lm.fit8,vowelT),
predict(lm.fit9,vowelT),
predict(lm.fit10,vowelT),
predict(lm.fit11,vowelT)
)
lm.pred_class<-apply(lm.pred,1,order,decreasing=T)[1,]
out<-as.matrix(table(lm.pred_class,vowelT$y)); out
test.error.lm<-(sum(out)-sum(diag(out)))/dim(vowelT)[1]
test.error.lm
p1<-0.5
p2<-1-p1
curve(p1*dnorm(x,mean=-1),-5,5,ylab="density",
ylim=c(0,max(p1*dnorm(-1,mean=-1),p2*dnorm(1,mean=1))),
col="blue")
curve(p2*dnorm(x,mean=+1),add=T,col="orange")
title(main="p1*f1(x) vs p2*f2(x)")
legend("topright",legend=c("p1*f1(x)","p2*f2(x)"),
lty=c(1,1),col=c("blue","orange"),bty="n")
f<-function(x) p2*dnorm(x,mean=+1)-p1*dnorm(x,mean=-1)
curve(f,-5,5,ylab="density")
title(main="p2*f2(x)-p1*f1(x)")
abline(h=0,lty=2)
arrows(x0=0, y0=0.05, x1=-5, y1=0.05,
lwd=2, code=3, col = "red")
text(-2.5,0.1,expression(R[1]),pos=1,cex=1.5,col="red")
rm(list=ls())
m.g<-c(0,2)
m.b<-c(m.g[1] * cos( 240*pi/180 ) - ( m.g[2] * sin( 240*pi/180 ) ),
m.g[1] * sin( 240*pi/180 ) + ( m.g[2] * cos( 240*pi/180 ) ))
m.o<-c(m.g[1] * cos( 120*pi/180 ) - ( m.g[2] * sin( 120*pi/180 ) ),
m.g[1] * sin( 120*pi/180 ) + ( m.g[2] * cos( 120*pi/180 ) ))
M<-rbind(m.b,m.g,m.o)
M
round(colMeans(M),3)
s1 <- sqrt(3)
s2 <- sqrt(1/2)
th<-45*pi/180
P<-function(th) matrix(c(cos(th),-sin(th),sin(th),cos(th)),ncol=2)
Sigma <- t(P(th))%*%diag(c(s1,s2))%*%P(th)
round(Sigma,3)
range.x<-c(-6,6)
range.y<-c(-5,5)
plot(ellipse(x=Sigma,
centre=m.b,
levels=0.95),col="blue",type="l",
xlim=range.x,ylim=range.y,asp=1)
lines(ellipse(x=Sigma,
centre=m.g,
levels=0.95),col="green3")
lines(ellipse(x=Sigma,
centre=m.o,
levels=0.95),col="orange")
points(M[,1],M[,2],pch="+",cex=3)
len1<-80; len2<-100
delta<-0.2
p.x1<-seq(from=range.x[1]-delta,to=range.x[2]+delta,length=len1)
p.x2<-seq(from=range.y[1]-delta,to=range.y[2]+delta,length=len2)
dataT<-expand.grid(X1=p.x1,X2=p.x2)
discr.f<-function(x,mu,s) t(x)%*%solve(s)%*%mu-(1/2)*t(mu)%*%solve(s)%*%mu
lda.pred<-cbind(apply(as.matrix(dataT),1,discr.f,mu=M[1,],s=Sigma),
apply(as.matrix(dataT),1,discr.f,mu=M[2,],s=Sigma),
apply(as.matrix(dataT),1,discr.f,mu=M[3,],s=Sigma)
)
plot(ellipse(x=Sigma,
centre=m.b,
levels=0.95),col="blue",type="l",
xlim=range.x,ylim=range.y,asp=1,
xlab="X1",ylab="X2")
lines(ellipse(x=Sigma,
centre=m.g,
levels=0.95),col="green3")
lines(ellipse(x=Sigma,
centre=m.o,
levels=0.95),col="orange")
points(M[,1],M[,2],pch="+",cex=3)
zp <- lda.pred[,3] -
pmax(lda.pred[,2],lda.pred[,1])
contour(p.x1, p.x2, matrix(zp, nrow=len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T)
zp <- lda.pred[,2] -
pmax(lda.pred[,1],lda.pred[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T)
zp <- lda.pred[,1] -
pmax(lda.pred[,2],lda.pred[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T)
set.seed(100)
n1<-n2<-n3<-30; n<-n1+n2+n3
data <- rbind(
mvrnorm(n1, mu = m.b, Sigma = Sigma ),
mvrnorm(n2, mu = m.g, Sigma = Sigma ),
mvrnorm(n3, mu = m.o, Sigma = Sigma )
)
data<-as.data.frame(data)
names(data) <- c("X1","X2")
data$class<-c(rep("b",n1),rep("g",n2),rep("o",n3))
lookup1<-c(b="blue", g="green3", o="orange")
data.col<-lookup1[data$class]
lda.fit<-lda(class~X1+X2,data=data,prior=c(1/3,1/3,1/3))
out<-as.matrix(table(predict(lda.fit)$class,data[,3])); out
training.error<-(sum(out)-sum(diag(out)))/n
training.error
lda.pred<-predict(lda.fit,dataT)
lda.col<-lookup1[lda.pred$class]
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5,
xlim=range.x,ylim=range.y)
zp <- lda.pred$posterior[,3] -
pmax(lda.pred$posterior[,2],lda.pred$posterior[,1])
contour(p.x1, p.x2, matrix(zp, nrow=len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
zp <- lda.pred$posterior[,2] -
pmax(lda.pred$posterior[,1],lda.pred$posterior[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
zp <- lda.pred$posterior[,1] -
pmax(lda.pred$posterior[,2],lda.pred$posterior[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
means.hat<-as.matrix(aggregate(data[,-3],by=list(data$class),mean)[,-1])
colMeans(means.hat);
colMeans(data[-3])
S1<-var(data[data$class=="b",-3])
S2<-var(data[data$class=="g",-3])
S3<-var(data[data$class=="o",-3])
S<-( (n1-1)*S1+(n2-1)*S2+(n3-1)*S3 )/(n1+n2+n3-3); round(S,3)
lda.pred<-cbind(apply(as.matrix(dataT),1,discr.f,mu=means.hat[1,],s=S),
apply(as.matrix(dataT),1,discr.f,mu=means.hat[2,],s=S),
apply(as.matrix(dataT),1,discr.f,mu=means.hat[3,],s=S)
)
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5,
xlim=range.x,ylim=range.y)
zp <- lda.pred[,3] -
pmax(lda.pred[,2],lda.pred[,1])
contour(p.x1, p.x2, matrix(zp, nrow=len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
zp <- lda.pred[,2] -
pmax(lda.pred[,1],lda.pred[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
zp <- lda.pred[,1] -
pmax(lda.pred[,2],lda.pred[,3])
contour(p.x1, p.x2, matrix(zp, len1),
levels=0, las=1, drawlabels=FALSE, lwd=1.5, add=T, col="violet")
rm(list=ls())
data<-read.table("data/hemophilia.txt",header=FALSE)
names(data)<-c("group","X1","X2")
data[1:4,]
dim(data)
data$class<-factor(data$group,levels=1:2,labels=c("b","o"))
data[1:4,]
table(data$class)
n1<-sum(data$class=="b"); n1
n2<-sum(data$class=="o"); n2
n<-n1+n2; n
data.col<-ifelse(data$class=="o","orange","blue")
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5)
means.hat<-as.matrix(aggregate(data[,2:3],by=list(data$class),mean)[,-1])
round(means.hat,3)
colMeans(means.hat)
S1<-var(data[data$class=="b",2:3])
S2<-var(data[data$class=="o",2:3])
lines(ellipse(x=S,centre=means.hat[1,],
t=sqrt(qchisq(0.5, 2))),col="blue")
S<-( (n1-1)*S1+(n2-1)*S2 )/(n1+n2-2);
round(S,3)
range.x<-c(-0.9,0.4); range.y<-c(-0.6,0.4)
plot(X2~X1, data=data, asp=1,
xlim=range.x, ylim=range.y,
col=data.col, lwd=1.5,main="hemophilia data")
lines(ellipse(x=S,centre=means.hat[1,],
t=sqrt(qchisq(0.95, 2))),col="blue")
lines(ellipse(x=S,centre=means.hat[2,],
t=sqrt(qchisq(0.5, 2))),col="orange")
lines(ellipse(x=S,centre=means.hat[2,],
t=sqrt(qchisq(0.95, 2))),col="orange")
points(means.hat[1,1],means.hat[1,2],pch=16,cex=1.5,col="blue")
points(means.hat[2,1],means.hat[2,2],pch=16,cex=1.5,col="orange")
legend("bottomright",legend=c("Normals (1)","Carriers (2)"),
pch=c(1,1),col=c("blue","orange"),bty="n")
round(means.hat[1,]-means.hat[2,],3)
round(solve(S),2)
round(t(means.hat[1,]-means.hat[2,])%*%solve(S),3)
a<-solve(S)%*%(means.hat[1,]-means.hat[2,])
round(a,3)
m<-(means.hat[1,]+means.hat[2,])/2; round(m,3)
abline(a=(t(a)%*%m)/a[2],b=-a[1]/a[2],lwd=2,col="violet")
lm.fit<-lm(I(group==2)~X1+X2,data=data)
coef(lm.fit)
intercept<-(0.5-coef(lm.fit)[1])/coef(lm.fit)[3];
slope<--coef(lm.fit)[2]/coef(lm.fit)[3]
abline(a=intercept, b=slope, lwd=2, lty=2,col="violet")
round(t(a)%*%m,3)
x.0<-c(-0.250,-0.088)
round(t(a)%*%x.0,3); round(t(a)%*%m,3)
points(x.0[1],x.0[2],pch=8)
t(a)%*%x.0>t(a)%*%m
pi1<-n1/n; pi1
pi2<-n2/n; pi2
round(log(pi2/pi1),3)
round(t(a)%*%m+log(pi2/pi1),3)
t(a)%*%x.0
t(a)%*%x.0>t(a)%*%m+log(pi2/pi1)
range.x<-c(-0.9,0.4); range.y<-c(-0.6,0.4)
plot(X2~X1, data=data, asp=1,
xlim=range.x, ylim=range.y,
col=data.col, lwd=1.5,main="hemophilia data")
lines(ellipse(x=S,centre=means.hat[1,],
t=sqrt(qchisq(0.5, 2))),col="blue")
lines(ellipse(x=S,centre=means.hat[1,],
t=sqrt(qchisq(0.95, 2))),col="blue")
lines(ellipse(x=S,centre=means.hat[2,],
t=sqrt(qchisq(0.5, 2))),col="orange")
lines(ellipse(x=S,centre=means.hat[2,],
t=sqrt(qchisq(0.95, 2))),col="orange")
points(means.hat[1,1],means.hat[1,2],pch=16,cex=1.5,col="blue")
points(means.hat[2,1],means.hat[2,2],pch=16,cex=1.5,col="orange")
legend("bottomright",legend=c("Normals (1)","Carriers (2)"),
pch=c(1,1),col=c("blue","orange"),bty="n")
points(x.0[1],x.0[2],pch=8)
abline(a=(t(a)%*%m)/a[2],b=-a[1]/a[2],lwd=2,col="violet")
abline(a=(t(a)%*%m+log(pi2/pi1))/a[2],b=-a[1]/a[2],lwd=2,col="brown")
round(log(pi2/pi1)/a[2],3)
a
D<-diag(diag(S));round(D,4)
a.star<-sqrt(D)%*%a
round(a.star,3)
lda.fit<-lda(class~X1+X2,prior=c(0.5,0.5),data=data)
out<-as.matrix(table(predict(lda.fit)$class,data$class))
out
training.error
training.error<-(sum(out)-sum(diag(out)))/n
len1<-len2<-100
delta<-0.1
p.x2<-seq(from=min(data$X2-delta),to=max(data$X2+delta),length=len2)
p.x1<-seq(from=min(data$X1-delta),to=max(data$X1+delta),length=len1)
library(MASS)
library(ellipse)
library(nnet)
library(class)
rm(list=ls())
iris[1:4,]
table(iris$Species)
dim(iris)
data.col<-iris$Species
levels(data.col)<-c("blue","orange","green")
data.col<-as.character(data.col)
pairs(iris[1:4],pch=21,bg=data.col,lower.panel=NULL)
plot(Petal.Length~Petal.Width, data=iris, bg=data.col, pch=21)
abline(h=2.45,lty=2)
abline(v=1.75,lty=2)
plot(Petal.Length~Petal.Width, data=iris, bg=data.col, pch=21)
abline(a=5,b=-4,lty=2,lwd=1.5)
abline(a=11.5,b=-4,lty=2,lwd=1.5)
rm(list=ls())
load("data/ESL.mixture.rda")
attach(ESL.mixture)
library(ElemStatLearn)
load("/Users/Cinus/University/Magistrale_Sistemi_Complessi_Torino/MSA/Lecture_7/Lecture_7/Lecture_7 3/data/ESL.mixture.rda")
load("/Users/Cinus/University/Magistrale_Sistemi_Complessi_Torino/MSA/Lecture_7/Lecture_7/Lecture_7 3/data/ESL.mixture.rda")
attach(ESL.mixture)
m.b<-means[1:10,]
m.o<-means[11:20,]
data<-as.data.frame(x); names(data)<-c("X1","X2")
data$class<-factor(y,levels=0:1,labels=c("b","o"))
detach(ESL.mixture)
data[1:5,]
data.col<-ifelse(data$class=="o","orange","blue")
plot(X2~X1, data=data, col=data.col, asp=1, lwd=1.5)
n<-2*100
lm.fit<-lm(I(class=="o")~X1+X2, data=data)
lm.fitted<-predict(lm.fit,data)
lm.fitted_class<-ifelse(lm.fitted>0.5,"o","b")
out<-as.matrix(table(lm.fitted_class,data[,3]))
out
lm.train.error<-(out[1,2]+out[2,1])/n
lm.train.error
p.x1<-ESL.mixture$px1
p.x2<-ESL.mixture$px2
dataT<-as.data.frame(ESL.mixture$xnew); names(dataT)<-c("X1","X2")
install.packages("tidyverse")
s<-strsplit(string, '')
string<-'c10r10n70.txt'
s<-strsplit(string, '')
s<-strsplit(string, ''); s
library(tidyr)
rm(list = ls())
SocialData = function(title){
str_title = strsplit(title, "[a-z]")
str_title
companies = as.integer(str_title[[1]][2])
range = as.integer(str_title[[1]][3])
users = as.integer(str_title[[1]][4])
#OPINION MATRIX
p = read.table(paste(title,".txt" , sep = "") ,sep = ",")
X = as.data.frame(p)
days = dim(X)[1] / users
OPs = list()
ind = 1
for(i in 1:days){
OPs[[i]] = X[ind: (ind + (users-1)),]
ind = ind +  users
}
p = read.table(paste(title,"Inc.txt" , sep = "") ,sep = ",")
X = as.data.frame(p)
OPs[["Inc"]] = X
return(OPs)
}
title = "c5r10n100"
S = SocialData(title)
setwd("~/University/Magistrale_Sistemi_Complessi_Torino/MAS/GitHub/SocialStock")
title = "c5r10n100"
S = SocialData(title)
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"))
legend("topright", legend=c("I=-1", "I=0","I=1"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
title = "c5r10n100"
S = SocialData(title)
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"))
legend("topright", legend=c("I=-1", "I=0","I=1"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
title = "c5r10n100"
S = SocialData(title)
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"))
legend("topright", legend=c("I=-1", "I=0","I=1"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
qnorm(1/3)
title = "c5r10n100"
S = SocialData(title)
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"))
legend("topright", legend=c("I=-1", "I=0","I=1"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
title = "c5r10n100"
S = SocialData(title)
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"))
legend("topright", legend=c("I=-1", "I=0","I=1"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
title = "c5r10n100"
S = SocialData(title)
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"))
legend("topright", legend=c("I=-1", "I=0","I=1"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
legend("topright", legend=c("Crastuli fazione 1", "Non crastuli","Crastuli fazione 2"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
legend("topright", legend=c("Crastuli fazione 1", "Non crastuli","Crastuli fazione 2"),
col=c("blue" , "red" , "green", xlabel="tempo"), pch = c(20,20), cex=0.8)
legend("topright", legend=c("Crastuli fazione 1", "Non crastuli","Crastuli fazione 2"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"), xlabel="tempo")
matplot(S$Inc,type="l", col = c("blue" , "red" , "green"))
legend("topright", legend=c("Crastuli fazione 1", "Non crastuli","Crastuli fazione 2"),
col=c("blue" , "red" , "green"), pch = c(20,20), cex=0.8)
